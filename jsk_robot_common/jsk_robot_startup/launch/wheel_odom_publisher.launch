<launch>
  <!-- create TF between BODY and bicycle_center -->
  <!-- ;; calculate transformation from BODY to bicycle_center by euslisp -->
  <!-- (let* ((bicycle_center-coords (make-coords :pos (float-vector 0 0 0))) -->
  <!--        (BODY-coords (send (send *robot* :body_lk) :copy-worldcoords))) -->
  <!--        (send BODY-coords :transformation bicycle_center-coords)) -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="TF_BODY_bicycle_center" args="0.291126 0.0 -0.803782 0.0 -0.175 0.0 BODY bicycle_center 100"/> -->
  <node pkg="tf" type="static_transform_publisher" name="TF_BODY_bicycle_center" args="-0.291126 0.0 0.803782 0.0 0.175 0.0 bicycle_center BODY 100"/>

  <node pkg="jsk_robot_startup" type="WheelOdometryPublisher.py" name="wheel_odometry_publisher">
    <param name="base_link_frame" value="bicycle_center"/>
    <param name="invert_tf" value="false"/>
    <param name="publish_tf" value="false"/>
    <param name="odom_frame" value="odom"/>
    <remap from="~velocity" to="/tricycle_linear_vel_local" />
    <remap from="~omega" to="/tricycle_angular_vel_local" />
    <remap from="~output" to="/wheel_odom" />
    <rosparam>
      rate: 200
      sigma_x: 0.2
      sigma_y: 0.05
      sigma_z: 0.001
      sigma_roll: 0.001
      sigma_pitch: 0.001
      sigma_yaw: 0.5
    </rosparam>
  </node>
</launch>
