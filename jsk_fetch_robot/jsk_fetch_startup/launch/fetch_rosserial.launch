<launch>
  <!-- The rfcomm device names (e.g. /dev/rfcomm0) corresponds to
       the order of /var/lib/robot/rfcomm_devices.yaml -->
  <!-- To bind rfcomm devices, https://github.com/jsk-ros-pkg/jsk_robot/pull/1401 is used -->

  <!-- The firmwares are https://github.com/jsk-ros-pkg/jsk_3rdparty/pull/289 -->
  <!-- Set logger leve to error to supress WARN when the device is not connected -->

  <arg name="sgp30_ns" value="sgp30" />
  <arg name="pdm_spm1423_ns" value="pdm_spm1423" />
  <arg name="mlx90640_ns" value="mlx90640" />
  <arg name="unitv_ns" value="unitv" />

  <!-- rosseiral via Bluetooth -->
  <!-- sgp30 gas sensor -->
  <group ns="$(arg sgp30_ns)">
    <node pkg="rosserial_python" type="serial_node.py" name="serial_node"
          respawn="true" respawn_delay="10">
      <rosparam subst_value="true">
        port: /dev/rfcomm0
        baud: 115200
      </rosparam>
    </node>
    <node pkg="rosservice" type="rosservice" name="set_logger_level"
          args="call --wait /$(arg sgp30_ns)/serial_node/set_logger_level 'rosout' 'error'" />
  </group>
  <!-- pdm_spm1423 microphone -->
  <group ns="$(arg pdm_spm1423_ns)">
    <node pkg="rosserial_python" type="serial_node.py" name="serial_node"
          respawn="true" respawn_delay="10">
      <rosparam subst_value="true">
        port: /dev/rfcomm1
        baud: 115200
      </rosparam>
    </node>
    <node pkg="rosservice" type="rosservice" name="set_logger_level"
          args="call --wait /$(arg pdm_spm1423_ns)/serial_node/set_logger_level 'rosout' 'error'" />
  </group>
  <!-- mlx90640 thermography -->
  <group ns="$(arg mlx90640_ns)">
    <node pkg="rosserial_python" type="serial_node.py" name="serial_node"
          respawn="true" respawn_delay="10">
      <rosparam subst_value="true">
        port: /dev/rfcomm2
        baud: 115200
      </rosparam>
    </node>
    <node pkg="rosservice" type="rosservice" name="set_logger_level"
          args="call --wait /$(arg mlx90640_ns)/serial_node/set_logger_level 'rosout' 'error'" />
  </group>
  <!-- unitv AI camera -->
  <group ns="$(arg unitv_ns)">
    <node pkg="rosserial_python" type="serial_node.py" name="serial_node"
          respawn="true" respawn_delay="10">
      <rosparam subst_value="true">
        port: /dev/rfcomm3
        baud: 115200
      </rosparam>
    </node>
    <node pkg="rosservice" type="rosservice" name="set_logger_level"
          args="call --wait /$(arg unitv_ns)/serial_node/set_logger_level 'rosout' 'error'" />
    <!-- decompress unitv image -->
    <node pkg="image_transport" type="republish" name="republish" args="compressed raw">
      <remap from="in" to="unitv_image" />
      <remap from="out" to="unitv_image" />
    </node>
    <!-- draw recognized result on unitv image -->
    <node name="draw_rects" pkg="jsk_perception" type="draw_rects">
      <remap from="~input" to="unitv_image" />
      <remap from="~input/rects" to="unitv_image/rects" />
      <remap from="~input/class" to="unitv_image/class" />
      <rosparam>
        use_classification_result: true
        label_size: 0.3
        resolution_factor: 2.0
      </rosparam>
    </node>
  </group>
</launch>
