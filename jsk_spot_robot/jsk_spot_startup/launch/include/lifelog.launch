<launch>
  <arg name="min_percent" default="5" />
  <arg name="max_percent" default="15" />

  <node pkg="jsk_robot_startup" type="email_topic.py" name="email_topic" output="screen" >
  </node>

  <node name="smach_to_mail" pkg="jsk_robot_startup" type="smach_to_mail.py" output="screen">
    <remap from="~smach/container_status" to="/server_name/smach/container_status" />
    <param name="sender_address" command='python -c "import rospy;print(rospy.get_param(\"robot/name\")+\"@jsk.imi.i.u-tokyo.ac.jp\")"' />
    <param name="receiver_address" command='python -c "import rospy;print(rospy.get_param(\"robot/type\")+\"@jsk.imi.i.u-tokyo.ac.jp\")"' />
  </node>

  <!-- EDIT: rosparam for all robots -->
  <param name="robot/database" value="jsk_robot_lifelog"/>

  <!-- logging database -->
  <param name="mongodb_replicate_on_write" value="true" /> <!-- need to set True to query from extra serveres, otherwise it only query from local server -->
  <include file="$(find jsk_robot_startup)/lifelog/mongodb.launch">
    <arg name="use_daemon" value="true"/>
    <arg name="port" value="27017" />
    <arg name="repl_set_mode" value="false" />
    <arg name="replicate" default="true" />
  </include>

  <!-- outputs /spot/camera/hand_color/image/output when new scene found -->
  <include file="$(find jsk_perception)/launch/video_to_scene.launch" >
    <arg name="INPUT_IMAGE" value="/spot/camera/hand_color/image" />
    <arg name="IMAGE_TRANSPORT" default="compressed" />
    <arg name="launch_manager" value="true" />
    <arg name="manager" value="vidoe_to_scene_nodelet_manager" />
    <arg name="min_percent" value="$(arg min_percent)" />
    <arg name="max_percent" value="$(arg max_percent)" />
  </include>

  <arg name="map_frame" default="odom" />
  <include file="$(find jsk_robot_startup)/lifelog/common_logger.launch">
    <arg name="save_rgb" value="false" />
    <arg name="save_depth" value="false" />
    <!-- <arg name="save_tf" value="true" /> -->
    <!-- <arg name="save_joint_states" value="true" /> -->
    <arg name="save_tf" value="false" />
    <arg name="save_joint_states" value="false" />
    <arg name="save_base_trajectory" value="false" />
    <arg name="save_object_detection" value="false" />
    <arg name="save_action" value="true" />
    <arg name="save_smach" value="true" />
    <arg name="save_faces" value="true" />
    <arg name="save_dialogflow" value="true" />
    <arg name="save_app" value="false" />
    <arg name="enable_monitor" value="false" />
    <arg name="log_rate" value="1.0" />
    <arg name="launch_manager" value="true" />
    <arg name="manager" value="mongodb_record_nodelet_manager" />
    <arg name="map_frame_id" value="$(arg map_frame)" />
    <arg name="approximate_sync" value="true"/>
  </include>

  <!-- publish /spot/trigger_mongodb_event when video_to_scene, */class or dialogflow are detected -->
  <node pkg="topic_tools" type="transform" name="publish_trigger_mongodb_video_to_scene"
        args="--wait-for-start /spot/camera/hand_color/image/output/compressed /publish_trigger_mongodb_event std_msgs/Header
              'std_msgs.msg.Header(stamp=m.header.stamp, frame_id=m._connection_header[&quot;callerid&quot;])' --import std_msgs" />
  <node pkg="topic_tools" type="transform" name="publish_trigger_mongodb_event_back"
        args="--wait-for-start /spot/ncb_provider/back_fisheye_image/class /publish_trigger_mongodb_event std_msgs/Header
              'std_msgs.msg.Header(stamp=m.header.stamp, frame_id=m._connection_header[&quot;topic&quot;]+&quot;__&quot;+&quot;_&quot;.join(m.label_names))' --import std_msgs" />
  <node pkg="topic_tools" type="transform" name="publish_trigger_mongodb_event_frontleft"
        args="--wait-for-start /spot/ncb_provider/frontleft_fisheye_image/class /publish_trigger_mongodb_event std_msgs/Header
              'std_msgs.msg.Header(stamp=m.header.stamp, frame_id=m._connection_header[&quot;topic&quot;]+&quot;__&quot;+&quot;_&quot;.join(m.label_names))' --import std_msgs" />
  <node pkg="topic_tools" type="transform" name="publish_trigger_mongodb_event_frontright"
        args="--wait-for-start /spot/ncb_provider/frontright_fisheye_image/class /publish_trigger_mongodb_event std_msgs/Header
              'std_msgs.msg.Header(stamp=m.header.stamp, frame_id=m._connection_header[&quot;topic&quot;]+&quot;__&quot;+&quot;_&quot;.join(m.label_names))' --import std_msgs" />
  <node pkg="topic_tools" type="transform" name="publish_trigger_mongodb_event_left"
        args="--wait-for-start /spot/ncb_provider/left_fisheye_image/class /publish_trigger_mongodb_event std_msgs/Header
              'std_msgs.msg.Header(stamp=m.header.stamp, frame_id=m._connection_header[&quot;topic&quot;]+&quot;__&quot;+&quot;_&quot;.join(m.label_names))' --import std_msgs" />
  <node pkg="topic_tools" type="transform" name="publish_trigger_mongodb_event_right"
        args="--wait-for-start /spot/ncb_provider/right_fisheye_image/class /publish_trigger_mongodb_event std_msgs/Header
              'std_msgs.msg.Header(stamp=m.header.stamp, frame_id=m._connection_header[&quot;topic&quot;]+&quot;__&quot;+&quot;_&quot;.join(m.label_names))' --import std_msgs" />
  <node pkg="topic_tools" type="transform" name="publish_trigger_mongodb_event_hand"
        args="--wait-for-start /spot/ncb_provider/hand_fisheye_image/class /publish_trigger_mongodb_event std_msgs/Header
              'std_msgs.msg.Header(stamp=m.header.stamp, frame_id=m._connection_header[&quot;topic&quot;]+&quot;__&quot;+&quot;_&quot;.join(m.label_names))' --import std_msgs" />

  <node pkg="topic_tools" type="transform" name="publish_trigger_mongodb_event_aws_auto_checkin"
        args="--wait-for-start /aws_auto_checkin_app/output/class /publish_trigger_mongodb_event std_msgs/Header
              'std_msgs.msg.Header(stamp=m.header.stamp, frame_id=m._connection_header[&quot;callerid&quot;])' --import std_msgs" />
  <node pkg="topic_tools" type="transform" name="publish_trigger_mongodb_event_aws_detect_faces"
        args="--wait-for-start /aws_detect_faces/attributes /publish_trigger_mongodb_event std_msgs/Header
              'std_msgs.msg.Header(stamp=m.header.stamp, frame_id=m._connection_header[&quot;callerid&quot;])' --import std_msgs" />
  <node pkg="topic_tools" type="transform" name="publish_trigger_mongodb_event_dialogflow_client"
        args="--wait-for-start /dialogflow_client/text_action/result /publish_trigger_mongodb_event std_msgs/Header
              'std_msgs.msg.Header(stamp=m.header.stamp, frame_id=m._connection_header[&quot;callerid&quot;])' --import std_msgs" />
  <node pkg="topic_tools" type="transform" name="publish_trigger_mongodb_event_google_chat_ros_send_goal"
        args="--wait-for-start /google_chat_ros/send/goal /publish_trigger_mongodb_event std_msgs/Header
              'std_msgs.msg.Header(stamp=m.header.stamp, frame_id=m._connection_header[&quot;callerid&quot;])' --import std_msgs" />
  <node pkg="topic_tools" type="transform" name="publish_trigger_mongodb_event_google_chat_ros_message_activity"
        args="--wait-for-start /google_chat_ros/message_activity /publish_trigger_mongodb_event std_msgs/Header
              'std_msgs.msg.Header(stamp=rospy.Time.now(), frame_id=m._connection_header[&quot;callerid&quot;])' --import std_msgs rospy" />

  <!-- republish compressed/throttled image data only when /publish_trigger_mongodb_event is published -->
  <node name="camera_throttle_nodelet"
        pkg="nodelet" type="nodelet"
        args="load jsk_topic_tools/SynchronizedThrottle mongodb_record_nodelet_manager" >
    <rosparam subst_value="true">
      approximate_sync: true
      topics:
      - /publish_trigger_mongodb_event
      - /spot/camera/hand_color/image/compressed
      - /spot/camera/frontleft/image/compressed
      - /spot/camera/frontright/image/compressed
      - /spot/camera/left/image/compressed
      - /spot/camera/right/image/compressed
      - /spot/camera/back/image/compressed
    </rosparam>
  </node>

  <!-- store thottled image -->
  <group ns="lifelog">
    <include file="$(find jsk_spot_startup)/launch/include/lifelog_rgb_image.launch" >
      <arg name="node_name" value="hand_color_logger" />
      <arg name="image" value="/spot/camera/hand_color/image/compressed/throttled" />
      <arg name="manager" value="mongodb_record_nodelet_manager" />
    </include>
    <include file="$(find jsk_spot_startup)/launch/include/lifelog_rgb_image.launch" >
      <arg name="node_name" value="frontleft_logger" />
      <arg name="image" value="/spot/camera/frontleft/image/compressed/throttled" />
      <arg name="manager" value="mongodb_record_nodelet_manager" />
    </include>
    <include file="$(find jsk_spot_startup)/launch/include/lifelog_rgb_image.launch" >
      <arg name="node_name" value="frontright_logger" />
      <arg name="image" value="/spot/camera/frontright/image/compressed/throttled" />
      <arg name="manager" value="mongodb_record_nodelet_manager" />
    </include>
    <include file="$(find jsk_spot_startup)/launch/include/lifelog_rgb_image.launch" >
      <arg name="node_name" value="left_logger" />
      <arg name="image" value="/spot/camera/left/image/compressed/throttled" />
      <arg name="manager" value="mongodb_record_nodelet_manager" />
    </include>
    <include file="$(find jsk_spot_startup)/launch/include/lifelog_rgb_image.launch" >
      <arg name="node_name" value="right_logger" />
      <arg name="image" value="/spot/camera/right/image/compressed/throttled" />
      <arg name="manager" value="mongodb_record_nodelet_manager" />
    </include>
    <include file="$(find jsk_spot_startup)/launch/include/lifelog_rgb_image.launch" >
      <arg name="node_name" value="back_logger" />
      <arg name="image" value="/spot/camera/back/image/compressed/throttled" />
      <arg name="manager" value="mongodb_record_nodelet_manager" />
    </include>
  </group>

  <!-- save classification data -->
  <node name="classification_logger"
        pkg="jsk_robot_startup" type="mongo_record.py" >
    <rosparam subst_value="true">
      topics:
      - /spot/ncb_provider/back_fisheye_image/class
      - /spot/ncb_provider/frontleft_fisheye_image/class
      - /spot/ncb_provider/frontright_fisheye_image/class
      - /spot/ncb_provider/hand_color_image/class
      - /spot/ncb_provider/left_fisheye_image/class
      - /spot/ncb_provider/right_fisheye_image/class
    </rosparam>
  </node>

  <!-- save bbox data -->
  <node name="bbox_logger"
        pkg="jsk_robot_startup" type="mongo_record.py" >
    <rosparam subst_value="true">
      topics:
      - /spot/ncb_provider/bbox_array
    </rosparam>
  </node>

  <node name="gps_logger"
        pkg="jsk_robot_startup" type="mongo_record.py" >
    <rosparam subst_value="true">
      topics:
      - /ublox/fix
      - /ublox/fix_velocity
    </rosparam>
  </node>

  <rosparam ns="lifelog/joint_states_throttle">
    periodic: false
    threshold: 0.01
  </rosparam>

  <rosparam ns="lifelog/action_logger">
    white_list:
      type:
      - control_msgs/FollowJointTrajectoryActionFeedback
      - control_msgs/FollowJointTrajectoryActionGoal
      - control_msgs/FollowJointTrajectoryActionResult
      - pr2_common_action_msgs/TuckArmsActionFeedback
      - pr2_common_action_msgs/TuckArmsActionGoal
      - pr2_common_action_msgs/TuckArmsActionResult
      - pr2_controllers_msgs/PointHeadActionFeedback
      - pr2_controllers_msgs/PointHeadActionGoal
      - pr2_controllers_msgs/PointHeadActionResult
      - pr2_controllers_msgs/Pr2GripperCommandActionFeedback
      - pr2_controllers_msgs/Pr2GripperCommandActionGoal
      - pr2_controllers_msgs/Pr2GripperCommandActionResult
      - sound_play/SoundRequestActionResult
      - sound_play/SoundRequestActionGoal
      - spot_msgs/PickObjectInImageActionGoal
      - spot_msgs/PickObjectInImageActionResult
  </rosparam>

  <rosparam ns="lifelog/speech_logger">
    topics:
      - /sound_play/goal
      - /robotsound/goal
      - /robotsound_jp/goal
      - /sound_play
      - /robotsound
      - /robotsound_jp
  </rosparam>

  <rosparam ns="lifelog/face_logger">
    topics:
    - /faces_name
    - /aws_auto_checkin_app/output/class
    - /aws_detect_faces/attributes
  </rosparam>

</launch>
