<launch>
  <arg name="ROBOT" default="$(env ROBOT)" />
  <arg name="map_frame" default="eng2" />
  <arg name="visualize_log" default="true" />
  <arg name="twitter" default="true" />
  <arg name="machine" default="c2" />
  <arg name="output" default="screen" />

  <!-- logger for additional topics -->
  <arg name="store_tf" default="false" />
  <arg name="store_joint_states" default="false" />
  <arg name="store_camera_rgb" default="false" />
  <arg name="store_camera_depth" default="false" />
  <arg name="store_people" default="false" />

  <include file="$(find pr2_machine)/$(arg ROBOT).machine" />

  <!-- logging and resoring pr2 position data -->
  <node name="base_trajectory_logger"
        pkg="jsk_robot_startup" type="base_trajectory_logger.py"
        machine="$(arg machine)">
    <param name="map_frame" value="$(arg map_frame)"/>
    <param name="robot_frame" value="base_footprint"/>
    <param name="update_cycle" value="0.1" />
  </node>

  <!-- logging object detection data -->
  <node name="object_detection_logger"
        pkg="jsk_robot_startup" type="object_detection_logger.py"
        machine="$(arg machine)">
    <param name="map_frame" value="$(arg map_frame)"/>
    <param name="robot_frame" value="base_footprint"/>
  </node>

  <!-- logging action result/goal data -->
  <node name="action_logger"
        pkg="jsk_robot_startup" type="action_logger.py"
        machine="$(arg machine)">
    <rosparam>
      black_list:
        type:
          - pr2_controllers_msgs/JointTrajectoryActionGoal
          - pr2_controllers_msgs/JointTrajectoryActionResult
          - pr2_controllers_msgs/JointTrajectoryActionFeedback
          - pr2_controllers_msgs/PointHeadActionGoal
          - pr2_controllers_msgs/PointHeadActionResult
          - pr2_controllers_msgs/PointHeadActionFeedback
          - pr2_controllers_msgs/SingleJointPositionActionGoal
          - pr2_controllers_msgs/SingleJointPositionActionResult
          - pr2_controllers_msgs/SingleJointPositionActionFeedback
          - control_msgs/SingleJointPositionActionGoal
          - control_msgs/SingleJointPositionActionResult
          - control_msgs/SingleJointPositionActionFeedback
          - tf2_msgs/LookupTransformActionGoal
          - tf2_msgs/LookupTransformActionResult
          - tf2_msgs/LookupTransformActionFeedback
    </rosparam>
  </node>

  <!-- logging other topics -->
  <group if="false"> <!-- deprecated -->
    <node name="mongodb_log_tf" pkg="jsk_pr2_startup" type="mongodb_log.py"
          output="$(arg output)" respawn="true" machine="$(arg machine)"
          args="/tf" if="$(arg store_tf)"/>

    <node name="mongodb_log_joint_states" pkg="jsk_pr2_startup" type="mongodb_log.py"
          output="$(arg output)" respawn="true" machine="$(arg machine)"
          args="/joint_states" if="$(arg store_joint_states)"/>

    <node name="mongodb_log_camera_rgb" pkg="jsk_pr2_startup" type="mongodb_log.py"
          output="$(arg output)" respawn="true" machine="$(arg machine)"
          args="-x '.*half' -x '.*quater' -x '.*openni' -e '.*/image_rect_color/compressed$'"
          if="$(arg store_camera_rgb)"/>

    <node name="mongodb_log_camera_depth" pkg="jsk_pr2_startup" type="mongodb_log.py"
          output="$(arg output)" respawn="true" machine="$(arg machine)"
          args="-x '.*openni' -x '.*half' -x '.*quater' -e '.*/depth_registered/points$'"
          if="$(arg store_camera_depth)"/>

    <node name="mongodb_log_people" pkg="jsk_pr2_startup" type="mongodb_log.py"
          output="$(arg output)" respawn="true" machine="$(arg machine)"
          args="/people /face_recognition/feedback /face_detector/faces_cloud"
          if="$(arg store_people)" />
  </group>

  <!-- tweeting robot warning data and etc. -->
  <include file="$(find jsk_pr2_startup)/jsk_pr2_lifelog/pr2_tweet.launch"
           if="$(arg twitter)"/>

  <!-- visualization of database -->
  <include file="$(find jsk_pr2_startup)/jsk_pr2_lifelog/visualization/pr2_log_visualization.launch"
    if="$(arg visualize_log)" />
</launch>
