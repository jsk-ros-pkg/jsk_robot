<launch>
  <arg name="load_driver" default="true" doc="launch driver set to false on gazebo"/>
  <arg name="respawn" default="true" />
  <arg name="use_c2" default="true" doc="Launch nodes for registration on C2"/>
  <arg name="deprecated_relay" default="true" doc="advertise to deprecated kinect_head_c2 ns"/>
  <arg name="camera" default="kinect_head" />
  <arg name="num_worker_threads" default="8" />
  <arg name="monitor_driver" default="false" />
  <arg name="throttle_rgb" default="true" />
  <arg name="throttle_depth" default="true" />
  <arg name="throttle_cloud" default="true" />
  <arg name="throttle_rate" default="5.0" />

  <arg unless="$(arg use_c2)" name="manager" default="kinect_head_nodelet_manager" />
  <arg     if="$(arg use_c2)" name="manager" default="kinect_head_c2_nodelet_manager" />

  <arg unless="$(arg use_c2)" name="registration_c1" default="true" />
  <arg     if="$(arg use_c2)" name="registration_c1" default="false" />

  <arg unless="$(arg use_c2)" name="machine" default="c1" />
  <arg     if="$(arg use_c2)" name="machine" default="c2" />

  <include file="$(find pr2_machine)/$(env ROBOT).machine" />

  <!-- openni driver on C1 -->
  <param name="/kinect_head/driver/depth_ir_offset_x" value="4.5" />
  <param name="/kinect_head/driver/depth_ir_offset_y" value="2.5" />
  <include file="$(find openni_launch)/launch/openni.launch"
           if="$(arg load_driver)">
    <arg name="camera" value="$(arg camera)"/>
    <arg name="num_worker_threads" value="$(arg num_worker_threads)" />
    <arg name="rgb_frame_id" value="/head_mount_kinect_rgb_optical_frame" />
    <arg name="depth_frame_id" value="/head_mount_kinect_ir_optical_frame" />
    <arg name="respawn" value="false" />
    <arg name="publish_tf" value="false"/>
    <arg name="depth_registration" value="true"/>
    <arg name="rgb_processing"                  value="$(arg registration_c1)"/>
    <arg name="ir_processing"                   value="$(arg registration_c1)"/>
    <arg name="depth_processing"                value="$(arg registration_c1)"/>
    <arg name="depth_registered_processing"     value="$(arg registration_c1)"/>
    <arg name="disparity_processing"            value="$(arg registration_c1)"/>
    <arg name="disparity_registered_processing" value="$(arg registration_c1)"/>
    <arg name="hw_registered_processing"        value="true" />
    <arg name="sw_registered_processing"        value="false" />
  </include>

  <!-- depth registration on C2 -->
  <node if="$(arg use_c2)"
        pkg="jsk_pr2_startup" type="kinect_head_c2.sh" name="kinect_head_c2_launch"
        args="camera:=$(arg camera)
              load_driver:=false
              publish_tf:=false
              depth_registration:=true
              respawn:=$(arg respawn)
              manager:=$(arg manager)
              deprecated_relay:=$(arg deprecated_relay)
              num_worker_threads:=$(arg num_worker_threads)"
        machine="c2" output="screen" />

  <!-- nodelet manager for gazebo -->
  <node ns="$(arg camera)" name="$(arg manager)"
        pkg="nodelet" type="nodelet" args="manager"
        unless="$(arg load_driver)" />

  <!-- downsample and throttle rgb image -->
  <group ns="$(arg camera)">
    <group ns="rgb" if="$(arg throttle_rgb)">
      <node name="throttle_camera_info"
            pkg="nodelet" type="nodelet"
            args="load jsk_topic_tools/LightweightThrottle /$(arg camera)/$(arg manager)"
            machine="$(arg machine)"
            respawn="true">
        <remap from="~input" to="camera_info"/>
        <remap from="~output" to="throttled/camera_info" />
        <param name="update_rate" value="$(arg throttle_rate)" />
      </node>
      <node name="throttle_rgb"
            pkg="nodelet" type="nodelet"
            args="load jsk_topic_tools/LightweightThrottle /$(arg camera)/$(arg manager)"
            machine="$(arg machine)"
            respawn="true">
        <remap from="~input" to="image_rect_color" />
        <remap from="~output" to="throttled/image_rect_color" />
        <param name="update_rate" value="$(arg throttle_rate)" />
      </node>
      <node name="downsample_half"
            pkg="nodelet" type="nodelet"
            args="load image_proc/resize /$(arg camera)/$(arg manager)"
            machine="$(arg machine)"
            respawn="true">
        <remap from="image" to="image_rect_color" />
        <remap from="~image" to="half/image_rect_color" />
        <remap from="~camera_info" to="half/camera_info" />
        <rosparam>
          scale_width: 0.5
          scale_height: 0.5
        </rosparam>
      </node>
      <node name="downsample_quater"
            pkg="nodelet" type="nodelet"
            args="load image_proc/resize /$(arg camera)/$(arg manager)"
            machine="$(arg machine)"
            respawn="true">
        <remap from="image" to="image_rect_color" />
        <remap from="~image" to="quater/image_rect_color" />
        <remap from="~camera_info" to="quater/camera_info" />
        <rosparam>
          scale_width: 0.25
          scale_height: 0.25
        </rosparam>
      </node>
    </group> <!-- rgb -->

    <!-- downsample and throttle point cloud -->
    <group ns="depth_registered">
      <node name="relay_image_rect"
            pkg="nodelet" type="nodelet"
            args="load jsk_topic_tools/Relay /$(arg camera)/$(arg manager)"
            machine="$(arg machine)"
            respawn="true">
        <remap from="~input" to="hw_registered/image_rect" />
        <remap from="~output" to="image_rect" />
      </node>
      <node name="relay_image_rect_compressed"
            pkg="nodelet" type="nodelet"
            args="load jsk_topic_tools/Relay /$(arg camera)/$(arg manager)"
            machine="$(arg machine)"
            respawn="true">
        <remap from="~input" to="hw_registered/image_rect/compressedDepth" />
        <remap from="~output" to="image_rect/compressedDepth" />
      </node>
      <node name="throttle_camera_info"
            pkg="nodelet" type="nodelet"
            args="load jsk_topic_tools/LightweightThrottle /$(arg camera)/$(arg manager)"
            machine="$(arg machine)"
            respawn="true">
        <remap from="~input" to="camera_info"/>
        <remap from="~output" to="throttled/camera_info" />
        <param name="update_rate" value="$(arg throttle_rate)" />
      </node>
      <node name="throttle_image"
            pkg="nodelet" type="nodelet"
            args="load jsk_topic_tools/LightweightThrottle /$(arg camera)/$(arg manager)"
            if="$(arg throttle_depth)"
            machine="$(arg machine)"
            respawn="true">
        <remap from="~input" to="image_rect" />
        <remap from="~output" to="throttled/image_rect" />
        <param name="update_rate" value="$(arg throttle_rate)" />
      </node>
      <node name="throttle_cloud"
            pkg="nodelet" type="nodelet"
            args="load jsk_topic_tools/LightweightThrottle /$(arg camera)/$(arg manager)"
            if="$(arg throttle_cloud)"
            machine="$(arg machine)"
            respawn="true">
        <remap from="~input" to="points" />
        <remap from="~output" to="throttled/points" />
        <param name="update_rate" value="$(arg throttle_rate)" />
      </node>
      <node name="downsample_cloud_half"
            pkg="nodelet" type="nodelet"
            args="load jsk_pcl/ResizePointsPublisher /$(arg camera)/$(arg manager)"
            if="$(arg throttle_cloud)"
            machine="$(arg machine)"
            respawn="true">
        <remap from="~input" to="points" />
        <remap from="~output" to="half/points" />
        <rosparam>
          step_x: 2
          step_y: 2
        </rosparam>
      </node>
      <node name="throttle_cloud_half"
            pkg="nodelet" type="nodelet"
            args="load jsk_topic_tools/LightweightThrottle /$(arg camera)/$(arg manager)"
            if="$(arg throttle_cloud)"
            machine="$(arg machine)"
            respawn="true">
        <remap from="~input" to="half/points" />
        <remap from="~output" to="half/throttled/points" />
        <param name="update_rate" value="$(arg throttle_rate)" />
      </node>
      <node name="downsample_cloud_quater"
            pkg="nodelet" type="nodelet"
            args="load jsk_pcl/ResizePointsPublisher /$(arg camera)/$(arg manager)"
            if="$(arg throttle_cloud)"
            machine="$(arg machine)"
            respawn="true">
        <remap from="~input" to="points" />
        <remap from="~output" to="quater/points" />
        <rosparam>
          step_x: 4
          step_y: 4
        </rosparam>
      </node>
      <node name="throttle_cloud_quater"
            pkg="nodelet" type="nodelet"
            args="load jsk_topic_tools/LightweightThrottle /$(arg camera)/$(arg manager)"
            if="$(arg throttle_cloud)"
            machine="$(arg machine)"
            respawn="true">
        <remap from="~input" to="quater/points" />
        <remap from="~output" to="quater/throttled/points" />
        <param name="update_rate" value="$(arg throttle_rate)" />
      </node>
    </group>
  </group>

  <!-- monitor kinect rgb and reset usb and respawn node on error -->
  <group if="$(arg respawn)">
    <node pkg="jsk_pr2_startup" name="check_openni_node" type="check_openni_node.py"
          output="screen" machine="c1" if="$(arg monitor_driver)">
      <param name="camera" value="$(arg camera)" />
      <param name="sleep_cycle" value="60" />
      <remap from="image" to="/$(arg camera)/rgb/image_rect_color" />
    </node>
  </group>

  <!-- self filter -->
  <include file="$(find jsk_pr2_startup)/jsk_pr2_sensors/kinect_head_self_filter.launch">
    <arg name="respawn" value="$(arg respawn)"/>
    <arg name="camera" value="$(arg camera)" />
    <arg name="machine" value="$(arg machine)" />
  </include>
</launch>
