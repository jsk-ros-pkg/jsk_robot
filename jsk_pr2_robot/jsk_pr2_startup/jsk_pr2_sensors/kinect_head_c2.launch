<!-- Originated from /opt/ros/indigo/share/openni_launch/launch/openni.launch -->
<launch>
  <arg name="camera" default="kinect_head" />
  <arg name="deprecated_relay" default="false" />
  <arg name="manager" default="kinect_head_c2_nodelet_manager" />
  <arg name="debug" default="false" /> <!-- Run manager in GDB? -->

  <arg name="rgb_frame_id"   default="$(arg camera)_rgb_optical_frame" />
  <arg name="depth_frame_id" default="$(arg camera)_ir_optical_frame" />

  <!-- device_id can have the following formats:
         "B00367707227042B": Use device with given serial number
         "#1"              : Use first device found
         "2@3"             : Use device on USB bus 2, address 3
         "2@0"             : Use first device found on USB bus 2
    -->
  <arg name="device_id" default="#1" />

  <!-- By default, calibrations are stored to file://${ROS_HOME}/camera_info/${NAME}.yaml,
       where ${NAME} is of the form "[rgb|depth]_[serial#]", e.g. "depth_B00367707227042B".
       See camera_info_manager docs for calibration URL details. -->
  <arg name="rgb_camera_info_url"   default="" />
  <arg name="depth_camera_info_url" default="" />

  <!-- Use OpenNI's factory-calibrated depth->RGB registration? -->
  <arg name="depth_registration" default="true" />

  <!-- Arguments for remapping all device namespaces -->
  <arg name="rgb"                       default="rgb" />
  <arg name="ir"                        default="ir" />
  <arg name="depth"                     default="depth" />
  <arg name="depth_registered"          default="depth_registered" />
  <arg name="depth_registered_filtered" default="depth_registered" />
  <arg name="projector"                 default="projector" />

  <!-- Optionally suppress loading the driver nodelet and/or publishing the default tf
       tree. Useful if you are playing back recorded raw data from a bag, or are
       supplying a more accurate tf tree from calibration. -->
  <arg name="load_driver" default="false" />
  <arg name="publish_tf" default="false" />
  <!-- Processing Modules -->
  <arg name="rgb_processing"                  default="true"/>
  <arg name="ir_processing"                   default="true"/>
  <arg name="depth_processing"                default="true"/>
  <arg name="depth_registered_processing"     default="true"/>
  <arg name="disparity_processing"            default="true"/>
  <arg name="disparity_registered_processing" default="true"/>
  <arg name="hw_registered_processing"        default="true" />
  <arg name="sw_registered_processing"        default="true" />

  <!-- Disable bond topics by default -->
  <arg name="bond" default="false" /> <!-- DEPRECATED, use respawn arg instead -->
  <arg name="respawn" default="$(arg bond)" />

  <!-- Worker threads for the nodelet manager -->
  <arg name="num_worker_threads" default="4" />

  <!-- Push down all topics/nodelets into "camera" namespace -->
  <group ns="$(arg camera)">
  
    <!-- Start nodelet manager in top-level namespace -->
    <include file="$(find rgbd_launch)/launch/includes/manager.launch.xml">
      <arg name="name"                value="$(arg manager)" />
      <arg name="debug"               value="$(arg debug)" />
      <arg name="num_worker_threads"  value="$(arg num_worker_threads)" />
    </include>

    <!-- Load driver -->
    <include if="$(arg load_driver)"
	     file="$(find openni_launch)/launch/includes/device.launch.xml">
      <!-- Could really use some syntactic sugar for this -->
      <arg name="manager"               value="$(arg manager)" />
      <arg name="device_id"             value="$(arg device_id)" />
      <arg name="rgb_frame_id"          value="$(arg rgb_frame_id)" />
      <arg name="depth_frame_id"        value="$(arg depth_frame_id)" />
      <arg name="rgb_camera_info_url"   value="$(arg rgb_camera_info_url)" />
      <arg name="depth_camera_info_url" value="$(arg depth_camera_info_url)" />
      <arg name="depth_registration"    value="$(arg depth_registration)" />
      <arg name="rgb"                   value="$(arg rgb)" />
      <arg name="ir"                    value="$(arg ir)" />
      <arg name="depth"                 value="$(arg depth)" />
      <arg name="depth_registered"      value="$(arg depth_registered)" />
      <arg name="projector"             value="$(arg projector)" />
      <arg name="respawn"               value="$(arg respawn)" />
    </include>
    
    <!-- Load standard constellation of processing nodelets -->
    <include file="$(find rgbd_launch)/launch/includes/processing.launch.xml">
      <arg name="manager"                         value="$(arg manager)" />
      <arg name="rgb"                             value="$(arg rgb)" />
      <arg name="ir"                              value="$(arg ir)" />
      <arg name="depth"                           value="$(arg depth)" />
      <arg name="depth_registered"                value="$(arg depth_registered)" />
      <arg name="depth_registered_filtered"       value="$(arg depth_registered_filtered)" />
      <arg name="projector"                       value="$(arg projector)" />
      <arg name="respawn"                         value="$(arg respawn)" />
      <arg name="rgb_processing"                  value="$(arg rgb_processing)" />
      <arg name="ir_processing"                   value="$(arg ir_processing)" />
      <arg name="depth_processing"                value="$(arg depth_processing)" />
      <arg name="depth_registered_processing"     value="$(arg depth_registered_processing)" />
      <arg name="disparity_processing"            value="$(arg disparity_processing)" />
      <arg name="disparity_registered_processing" value="$(arg disparity_registered_processing)" />
      <arg name="hw_registered_processing"        value="$(arg hw_registered_processing)" />
      <arg name="sw_registered_processing"        value="$(arg sw_registered_processing)" />
    </include>
  
  </group> <!-- camera -->

  <!-- Load reasonable defaults for the relative pose between cameras -->
  <include if="$(arg publish_tf)"
	   file="$(find rgbd_launch)/launch/kinect_frames.launch">
    <arg name="camera" value="$(arg camera)" />
  </include>

  <!-- deprecated relay -->
  <group ns="$(arg camera)" if="$(arg deprecated_relay)">
    <node name="deprecated_relay_rgb_image_rect_color"
          pkg="nodelet" type="nodelet"
          args="load jsk_topic_tools/DeprecatedRelay $(arg manager)"
          respawn="$(arg respawn)">
      <remap from="~input" to="rgb/image_rect_color" />
      <remap from="~output" to="/kinect_head_c2/rgb/image_rect_color" />
    </node>
    <node name="deprecated_relay_rgb_camera_info"
          pkg="nodelet" type="nodelet"
          args="load jsk_topic_tools/DeprecatedRelay $(arg manager)"
          respawn="$(arg respawn)">
      <remap from="~input" to="rgb/camera_info" />
      <remap from="~output" to="/kinect_head_c2/rgb/camera_info" />
    </node>

    <node name="deprecated_relay_depth_registered_points"
          pkg="nodelet" type="nodelet"
          args="load jsk_topic_tools/DeprecatedRelay $(arg manager)"
          respawn="$(arg respawn)">
      <remap from="~input" to="depth_registered/points" />
      <remap from="~output" to="/kinect_head_c2/depth_registered/points" />
    </node>
    <node name="deprecated_relay_depth_registered_camera_info"
          pkg="nodelet" type="nodelet"
          args="load jsk_topic_tools/DeprecatedRelay $(arg manager)"
          respawn="$(arg respawn)">
      <remap from="~input" to="depth_registered/camera_info" />
      <remap from="~output" to="/kinect_head_c2/depth_registered/camera_info" />
    </node>
  </group>
</launch>
